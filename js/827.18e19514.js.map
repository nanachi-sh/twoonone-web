{"version":3,"file":"js/827.18e19514.js","mappings":"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","sources":["webpack://uno-web/./src/views/UserLoginView.vue?32a7","webpack://uno-web/./src/views/UserLoginView.vue","webpack://uno-web/./src/views/UserLoginView.vue?3cd5"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createVNode as _createVNode, unref as _unref, setBlockTracking as _setBlockTracking, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, Fragment as _Fragment } from \"vue\"\n\nconst _hoisted_1 = {\n  key: 0,\n  style: {\"display\":\"none\"}\n}\nconst _hoisted_2 = { key: 1 }\nconst _hoisted_3 = { key: 0 }\nconst _hoisted_4 = { key: 1 }\n\nimport { AccountTypes, GenerateRandomString, GetUser, GetVerifyCode, GoToHome, LoginUser, PageBack, PutVerifyCode, QQVerifier_Errors, StorageUserInfo, UNO_Errors, UpdateUserInfoFromLocalStorage } from '@/commons/Global';\r\nimport BaseDialog from '../components/BaseDialog.vue';\r\nimport { ref } from 'vue';\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'UserLoginView',\n  setup(__props) {\n\r\nconst form = ref({\r\n    loginFrom: 'FromWeb',\r\n    fromWeb: {\r\n        userName: '',\r\n        userId: 'web'+GenerateRandomString(10),\r\n    },\r\n    fromQQ: {\r\n        qqId: '',\r\n        qqSendVerify: false,\r\n        qqVerifyCode: '',\r\n        qqVerifyHash: '',\r\n    }\r\n})\r\n\r\nasync function qq_sendVerifyCode() {\r\n    if (form.value.fromQQ.qqId==\"\") {\r\n        sendVerify_qqEmpty.value = true\r\n        return\r\n    }\r\n    const ret = await GetVerifyCode(form.value.fromQQ.qqId)\r\n    if (typeof(ret) == \"object\") {\r\n        form.value.fromQQ.qqVerifyHash = ret.VerifyHash\r\n        return\r\n    } else {\r\n        switch (ret) {\r\n            default:\r\n                console.log(`未处理错误：${QQVerifier_Errors[ret]}`)\r\n        }\r\n        return\r\n    }\r\n}\r\n\r\nfunction webLogin() {\r\n    const fromWeb = form.value.fromWeb\r\n    if (fromWeb.userName == \"\" || fromWeb.userId == \"\") {\r\n        return\r\n    }\r\n    StorageUserInfo({\r\n        Id: fromWeb.userId,\r\n        Name: fromWeb.userName,\r\n        Type: AccountTypes.Temp\r\n    })\r\n    UpdateUserInfoFromLocalStorage()\r\n    loginSuccessVisable.value = true\r\n}\r\n\r\nasync function qqLogin() {\r\n    const fromQQ = form.value.fromQQ\r\n    if (fromQQ.qqVerifyHash == \"\" || fromQQ.qqVerifyCode == \"\") {\r\n        return\r\n    }\r\n    const ret = await PutVerifyCode(fromQQ.qqVerifyHash, fromQQ.qqVerifyCode)\r\n    if (typeof(ret) != \"object\" && ret !== QQVerifier_Errors.Errors_ErrVerified) {\r\n        switch (ret) {\r\n            default:\r\n                console.log(`未处理错误：${QQVerifier_Errors[ret]}`)\r\n        }\r\n        return\r\n    }\r\n    if (typeof(ret) != \"object\" || ret.result == \"Verified\") {\r\n            const ret_getUser = await GetUser({\r\n                UserId: fromQQ.qqId,\r\n                method: \"\",\r\n                VerifyCode: {\r\n                    VerifyHash: fromQQ.qqVerifyHash,\r\n                    VerifySource: \"QQ\"\r\n                }\r\n            })\r\n            if (typeof(ret_getUser) == \"object\") {\r\n                StorageUserInfo({\r\n                    Id: ret_getUser.UserInfo.Id,\r\n                    Name: ret_getUser.UserInfo.Name,\r\n                    Hash: ret_getUser.UserHash,\r\n                    Type: AccountTypes.Normal\r\n                })\r\n                UpdateUserInfoFromLocalStorage()\r\n                loginSuccessVisable.value = true\r\n            } else {\r\n                switch (ret_getUser) {\r\n                    default:\r\n                        console.log(`未处理错误：${UNO_Errors[ret_getUser]}`)\r\n                }\r\n                return\r\n            }\r\n    }\r\n}\r\nconst loginedVisable = ref(false)\r\n// const sendVerifyed = ref(false)\r\nconst sendVerify_qqEmpty = ref(false)\r\nconst loginSuccessVisable = ref(false)\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_ElInput = _resolveComponent(\"ElInput\")!\n  const _component_ElFormItem = _resolveComponent(\"ElFormItem\")!\n  const _component_ElButton = _resolveComponent(\"ElButton\")!\n  const _component_ElRadio = _resolveComponent(\"ElRadio\")!\n  const _component_ElRadioGroup = _resolveComponent(\"ElRadioGroup\")!\n  const _component_ElForm = _resolveComponent(\"ElForm\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(BaseDialog, {\n      \"-body\": \"QQ号不能为空\",\n      modelValue: sendVerify_qqEmpty.value,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((sendVerify_qqEmpty).value = $event))\n    }, null, 8, [\"modelValue\"]),\n    _createVNode(BaseDialog, {\n      \"-body\": \"你已登录\",\n      modelValue: loginedVisable.value,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((loginedVisable).value = $event)),\n      \"-close-action\": () => {\r\n        _unref(PageBack)()\r\n    }\n    }, null, 8, [\"modelValue\", \"-close-action\"]),\n    _createVNode(BaseDialog, {\n      \"-body\": \"登录成功\",\n      modelValue: loginSuccessVisable.value,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((loginSuccessVisable).value = $event)),\n      \"-close-action\": () => {\r\n        _unref(GoToHome)()\r\n    }\n    }, null, 8, [\"modelValue\", \"-close-action\"]),\n    _cache[3] || (\n      _setBlockTracking(-1, true),\n      (_cache[3] = (_unref(LoginUser) !== null)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n            _createTextVNode(_toDisplayString(loginedVisable.value = true), 1)\n          ]))\n        : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n            _createVNode(_component_ElForm, null, {\n              default: _withCtx(() => [\n                (form.value.loginFrom == 'FromWeb')\n                  ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [\n                      _createVNode(_component_ElFormItem, { label: \"玩家ID：\" }, {\n                        default: _withCtx(() => [\n                          _createVNode(_component_ElInput, {\n                            modelValue: form.value.fromWeb.userId,\n                            \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((form.value.fromWeb.userId) = $event)),\n                            disabled: \"\"\n                          }, null, 8, [\"modelValue\"])\n                        ]),\n                        _: 1\n                      }),\n                      _createVNode(_component_ElFormItem, { label: \"玩家名称：\" }, {\n                        default: _withCtx(() => [\n                          _createVNode(_component_ElInput, {\n                            modelValue: form.value.fromWeb.userName,\n                            \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => ((form.value.fromWeb.userName) = $event)),\n                            maxlength: \"12\",\n                            placeholder: \"请输入你的名称\",\n                            \"show-word-limit\": \"\"\n                          }, null, 8, [\"modelValue\"])\n                        ]),\n                        _: 1\n                      })\n                    ]))\n                  : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n                      _createVNode(_component_ElFormItem, { label: \"QQ号：\" }, {\n                        default: _withCtx(() => [\n                          _createVNode(_component_ElInput, {\n                            modelValue: form.value.fromQQ.qqId,\n                            \"onUpdate:modelValue\": _cache[6] || (_cache[6] = ($event: any) => ((form.value.fromQQ.qqId) = $event)),\n                            maxlength: \"10\",\n                            placeholder: \"请输入你的QQ号\"\n                          }, null, 8, [\"modelValue\"]),\n                          _createVNode(_component_ElButton, { onClick: qq_sendVerifyCode }, {\n                            default: _withCtx(() => _cache[11] || (_cache[11] = [\n                              _createTextVNode(\"发送确认码\")\n                            ])),\n                            _: 1\n                          })\n                        ]),\n                        _: 1\n                      }),\n                      _createVNode(_component_ElFormItem, { label: \"确认码：\" }, {\n                        default: _withCtx(() => [\n                          _createVNode(_component_ElInput, {\n                            modelValue: form.value.fromQQ.qqVerifyCode,\n                            \"onUpdate:modelValue\": _cache[7] || (_cache[7] = ($event: any) => ((form.value.fromQQ.qqVerifyCode) = $event)),\n                            maxlength: \"6\",\n                            placeholder: \"请输入机器人私信发送的确认码\"\n                          }, null, 8, [\"modelValue\"])\n                        ]),\n                        _: 1\n                      })\n                    ])),\n                _createVNode(_component_ElFormItem, { label: \"登录源：\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ElRadioGroup, {\n                      modelValue: form.value.loginFrom,\n                      \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event: any) => ((form.value.loginFrom) = $event))\n                    }, {\n                      default: _withCtx(() => [\n                        _createVNode(_component_ElRadio, { value: \"FromWeb\" }, {\n                          default: _withCtx(() => _cache[12] || (_cache[12] = [\n                            _createTextVNode(\"临时玩家\")\n                          ])),\n                          _: 1\n                        }),\n                        _createVNode(_component_ElRadio, { value: \"FromQQ\" }, {\n                          default: _withCtx(() => _cache[13] || (_cache[13] = [\n                            _createTextVNode(\"QQ\")\n                          ])),\n                          _: 1\n                        })\n                      ]),\n                      _: 1\n                    }, 8, [\"modelValue\"])\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ElButton, {\n                  onClick: _cache[9] || (_cache[9] = ()=>{\r\n                if (form.value.loginFrom == `FromWeb`) {\r\n                    webLogin()\r\n                } else if (form.value.loginFrom == `FromQQ`) {\r\n                    qqLogin()\r\n                }\r\n            })\n                }, {\n                  default: _withCtx(() => _cache[14] || (_cache[14] = [\n                    _createTextVNode(\"登录\")\n                  ])),\n                  _: 1\n                }),\n                _createVNode(_component_ElButton, {\n                  onClick: _cache[10] || (_cache[10] = ($event: any) => (_unref(PageBack)()))\n                }, {\n                  default: _withCtx(() => _cache[15] || (_cache[15] = [\n                    _createTextVNode(\"返回\")\n                  ])),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]))).cacheIndex = 3,\n      _setBlockTracking(1),\n      _cache[3]\n    )\n  ], 64))\n}\n}\n\n})","<script setup lang=\"ts\">\r\nimport { AccountTypes, GenerateRandomString, GetUser, GetVerifyCode, GoToHome, LoginUser, PageBack, PutVerifyCode, QQVerifier_Errors, StorageUserInfo, UNO_Errors, UpdateUserInfoFromLocalStorage } from '@/commons/Global';\r\nimport BaseDialog from '../components/BaseDialog.vue';\r\nimport { ref } from 'vue';\r\nconst form = ref({\r\n    loginFrom: 'FromWeb',\r\n    fromWeb: {\r\n        userName: '',\r\n        userId: 'web'+GenerateRandomString(10),\r\n    },\r\n    fromQQ: {\r\n        qqId: '',\r\n        qqSendVerify: false,\r\n        qqVerifyCode: '',\r\n        qqVerifyHash: '',\r\n    }\r\n})\r\n\r\nasync function qq_sendVerifyCode() {\r\n    if (form.value.fromQQ.qqId==\"\") {\r\n        sendVerify_qqEmpty.value = true\r\n        return\r\n    }\r\n    const ret = await GetVerifyCode(form.value.fromQQ.qqId)\r\n    if (typeof(ret) == \"object\") {\r\n        form.value.fromQQ.qqVerifyHash = ret.VerifyHash\r\n        return\r\n    } else {\r\n        switch (ret) {\r\n            default:\r\n                console.log(`未处理错误：${QQVerifier_Errors[ret]}`)\r\n        }\r\n        return\r\n    }\r\n}\r\n\r\nfunction webLogin() {\r\n    const fromWeb = form.value.fromWeb\r\n    if (fromWeb.userName == \"\" || fromWeb.userId == \"\") {\r\n        return\r\n    }\r\n    StorageUserInfo({\r\n        Id: fromWeb.userId,\r\n        Name: fromWeb.userName,\r\n        Type: AccountTypes.Temp\r\n    })\r\n    UpdateUserInfoFromLocalStorage()\r\n    loginSuccessVisable.value = true\r\n}\r\n\r\nasync function qqLogin() {\r\n    const fromQQ = form.value.fromQQ\r\n    if (fromQQ.qqVerifyHash == \"\" || fromQQ.qqVerifyCode == \"\") {\r\n        return\r\n    }\r\n    const ret = await PutVerifyCode(fromQQ.qqVerifyHash, fromQQ.qqVerifyCode)\r\n    if (typeof(ret) != \"object\" && ret !== QQVerifier_Errors.Errors_ErrVerified) {\r\n        switch (ret) {\r\n            default:\r\n                console.log(`未处理错误：${QQVerifier_Errors[ret]}`)\r\n        }\r\n        return\r\n    }\r\n    if (typeof(ret) != \"object\" || ret.result == \"Verified\") {\r\n            const ret_getUser = await GetUser({\r\n                UserId: fromQQ.qqId,\r\n                method: \"\",\r\n                VerifyCode: {\r\n                    VerifyHash: fromQQ.qqVerifyHash,\r\n                    VerifySource: \"QQ\"\r\n                }\r\n            })\r\n            if (typeof(ret_getUser) == \"object\") {\r\n                StorageUserInfo({\r\n                    Id: ret_getUser.UserInfo.Id,\r\n                    Name: ret_getUser.UserInfo.Name,\r\n                    Hash: ret_getUser.UserHash,\r\n                    Type: AccountTypes.Normal\r\n                })\r\n                UpdateUserInfoFromLocalStorage()\r\n                loginSuccessVisable.value = true\r\n            } else {\r\n                switch (ret_getUser) {\r\n                    default:\r\n                        console.log(`未处理错误：${UNO_Errors[ret_getUser]}`)\r\n                }\r\n                return\r\n            }\r\n    }\r\n}\r\nconst loginedVisable = ref(false)\r\n// const sendVerifyed = ref(false)\r\nconst sendVerify_qqEmpty = ref(false)\r\nconst loginSuccessVisable = ref(false)\r\n</script>\r\n\r\n<template>\r\n    <BaseDialog -body=\"QQ号不能为空\" v-model=\"sendVerify_qqEmpty\" />\r\n    <BaseDialog -body=\"你已登录\" v-model=\"loginedVisable\" :-close-action=\"() => {\r\n        PageBack()\r\n    }\" />\r\n    <BaseDialog -body=\"登录成功\" v-model=\"loginSuccessVisable\" :-close-action=\"() => {\r\n        GoToHome()\r\n    }\"></BaseDialog>\r\n    <div v-if=\"LoginUser !== null\" v-once style=\"display: none;\">\r\n        {{ loginedVisable = true }}\r\n    </div>\r\n    <div v-else>\r\n        <ElForm>\r\n            <div v-if=\"form.loginFrom == 'FromWeb'\">\r\n                <ElFormItem label=\"玩家ID：\">\r\n                    <ElInput v-model=\"form.fromWeb.userId\" disabled></ElInput>\r\n                </ElFormItem>\r\n                <ElFormItem label=\"玩家名称：\">\r\n                    <ElInput v-model=\"form.fromWeb.userName\" maxlength=\"12\" placeholder=\"请输入你的名称\" show-word-limit></ElInput>\r\n                </ElFormItem>\r\n            </div>\r\n            <div v-else>\r\n                <ElFormItem label=\"QQ号：\">\r\n                    <ElInput v-model=\"form.fromQQ.qqId\" maxlength=\"10\" placeholder=\"请输入你的QQ号\"></ElInput>\r\n                    <ElButton @click=\"qq_sendVerifyCode\">发送确认码</ElButton>\r\n                </ElFormItem>\r\n                <ElFormItem label=\"确认码：\">\r\n                    <ElInput v-model=\"form.fromQQ.qqVerifyCode\" maxlength=\"6\" placeholder=\"请输入机器人私信发送的确认码\"></ElInput>\r\n                </ElFormItem>\r\n            </div>\r\n            <ElFormItem label=\"登录源：\">\r\n                <ElRadioGroup v-model=\"form.loginFrom\">\r\n                    <ElRadio value=\"FromWeb\">临时玩家</ElRadio>\r\n                    <ElRadio value=\"FromQQ\">QQ</ElRadio>\r\n                </ElRadioGroup>\r\n            </ElFormItem>\r\n            <ElButton @click=\"()=>{\r\n                if (form.loginFrom == `FromWeb`) {\r\n                    webLogin()\r\n                } else if (form.loginFrom == `FromQQ`) {\r\n                    qqLogin()\r\n                }\r\n            }\">登录</ElButton>\r\n            <ElButton @click=\"PageBack()\">返回</ElButton>\r\n        </ElForm>\r\n    </div>\r\n</template>","import script from \"./UserLoginView.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./UserLoginView.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","key","style","_hoisted_2","_hoisted_3","_hoisted_4","_defineComponent","__name","setup","__props","form","ref","loginFrom","fromWeb","userName","userId","GenerateRandomString","fromQQ","qqId","qqSendVerify","qqVerifyCode","qqVerifyHash","async","qq_sendVerifyCode","value","sendVerify_qqEmpty","ret","GetVerifyCode","console","log","QQVerifier_Errors","VerifyHash","webLogin","StorageUserInfo","Id","Name","Type","AccountTypes","UpdateUserInfoFromLocalStorage","loginSuccessVisable","qqLogin","PutVerifyCode","result","ret_getUser","GetUser","UserId","method","VerifyCode","VerifySource","UNO_Errors","UserInfo","Hash","UserHash","loginedVisable","_ctx","_cache","_component_ElInput","_resolveComponent","_component_ElFormItem","_component_ElButton","_component_ElRadio","_component_ElRadioGroup","_component_ElForm","_openBlock","_createElementBlock","_Fragment","_createVNode","BaseDialog","modelValue","$event","-close-action","_unref","PageBack","GoToHome","_setBlockTracking","LoginUser","_createTextVNode","_toDisplayString","default","_withCtx","label","disabled","_","maxlength","placeholder","onClick","cacheIndex","__exports__"],"sourceRoot":""}